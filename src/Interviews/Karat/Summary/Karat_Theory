https://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=464099&highlight=karat
 
## Abstraction
Abstraction is selecting data from a larger pool to show only the relevant details to the object.
It helps to reduce programming complexity and effort. In Java, abstraction is accomplished using
Abstract classes and interfaces.
 
## Composition vs Inheritance
Inheritance and Composition provides code reusablility, main difference between Composition and
Inheritance in Java is that Composition allows reuse of code without extending it but for Inheritance
you must extend the class for any reuse of code or functionality.
 
When you use Inheritance, you have to define which class you are extending in code, it cannot be changed
at runtime, but with Composition you just define a Type which you want to use, which can hold its different
implementation.
 
with Inheritance you can only extend one class, which means you code can only reuse just one class, not more
than one. If you want to leverage functionalities from multiple class, you must use Composition.
 
Though both Inheritance and Composition allows code reuse, Inheritance breaks encapsulation because in case
of Inheritance, subclass is dependent upon super class behavior.
 
## Dependency Injection
A technique whereby one object supplies the dependencies of another object. A dependency is an object that
can be used (a service). An injection is the passing of a dependency to a dependent object (a client)
that would use it.

#
What to pay attention to when designing a new collection document
How to debug some production metrics?

#
Two Questions About OOP
1. Briefly describe composition and inheritance and their differences.
2. Describe DI (dependence injection) and its advantages: (I added the disadvantages of di.. Brother agrees very much)
Questions about testing:
1. Briefly describe the mock and use its reason.
2. Design unit test cases for a fuction.
3. The test suite in some CIs is very slow, analyze the reasons and give solutions.
3. How to write a document when designing a new type? Compared with the general API documentation, the details are more important, such as whether the returned data is in order, the input range is accepted, and whether the thread is safe
  (Thread safe forgot when I met, now I think of it for everyone) etc.


#
product issues:
Give a graph, the graph of cpu and mem, cpu does not change much, mem is getting higher and higher, ask possible questions, how to trouble shoot
I also asked what is thread exhaustion and how to solve it

OOD’s problem:
composition vs inheritence
I think someone has asked about dependency injection

A system, a machine can handle 1 request per second, ask how to test, to ensure that the system is scalable, can handle 1000 requests per second

#
1. If you have a Facebook-like application with a lot of users, now you need to display how many friends the person who posted the post has in real time under each post. If you realize this function
2. If you design Google doc, there are now 100 servers, and each file can only be processed on one server. When there are more users, what performance issues will appear? If solved

#
1.Which Principle that you are using, and why?
  SOLID
  Single Responsibility : A class should only have a single responsibility, that is, only changes to one part of
                          the software's specification should be able to affect the specification of the class
  Open and Close : be open for extension, but closed for modification
  Liskov substitution : Objects in a program should be replaceable with instances of their subtypes without altering
                        the correctness of that program.
  Interface Segregation : Many client-specific interfaces are better than one general-purpose interface
  Depdedence Inversion : depend upon abstractions, [not] concretions

2.undo/redo , which data structure is good for this?
  Stack
  https://www.quora.com/What-kind-of-data-structures-do-undo-and-redo-uses

3.boolean flag. if you have too much flag, how to store in limited space device? which data structure
  is good for that.
4. how do you do the performance test and load test?


#
1. CPU unchanged and memory rise
2. Stack difference
  heap vs stack
  https://gribblelab.org/CBootCamp/7_Memory_Stack_vs_Heap.html
#Stack
very fast access
don't have to explicitly de-allocate variables
space is managed efficiently by CPU, memory will not become fragmented
local variables only
limit on stack size (OS-dependent)
variables cannot be resized
#Heap
variables can be accessed globally
no limit on memory size
(relatively) slower access
no guaranteed efficient use of space, memory may become fragmented over time as blocks of memory are allocated, then freed
you must manage memory (you're in charge of allocating and freeing variables)
variables can be resized using realloc()

3. Thread exhaustion
4.1tps service, 1000tps system (this is pure nonsense)

system internal
process thread
how they talk
GC shisha
Unwanted GC model

#
200-machine distributed system randomly has machines hang up at a specific time. Why is this?
Why is the error of a picture 500 particularly fluctuating?
The response time of the picture system fluctuates especially why

#
1. Two functions: O(m+n) vs O(mlogn) Under what circumstances the former is faster and under what circumstances the latter is faster
2. If you want to uniformly select a line randomly from a file, can you use "First read the file into bytes, select a byte randomly, find the newline forward and backward, and then select this line" to achieve
3. I don’t remember the third question, it seems to be related to complexity

#
The problems I remember are, best data structure for a specific problem, race condition, why object

#
Three about production service:
1. Give me a picture and ask me what is wrong with this picture. The CPU does not change much, and the Memory rises rapidly.
2. If a machine thread runs out, what symptoms will there be and how to solve it.
3. There is a service currently carrying 1tps, how to determine whether it can bear the customer request of 1000tps.

Three about testing:
1. When to use mock and when not to use mock
2. What if a test is particularly slow
3. Wrote an algorithm for the shortest path, how to test

#
I asked three groups of questions about system design. They were all verbal expressions. No code was required. They were all related to fault tolerance, distributed system,
It took about 15 minutes for load balance related

#
. Basic questions (Production issue, OOD)
   - graph with ram keep increasing and how to locate the issue
   - how to handle thread poll exhaustion
   - how to test web service QPS when it scale up

   - what's the different between Composition and inhertence
   - what need to be write in javadoc when you creat a new collection class
   - what is dependency injection and how it reduce software complexity


#
Then there are 4 essay questions in five minutes, which are probably questions in some work scenarios.
For example, if the team next door said to speed up the release cycle to once a day, what should be done.
(My answer is to realize continuous deployment, add pipelien, add integration test, add alarm, add monitors etc.)
For another example, after a release, there is always a random down in 200 servers, and the customer has no complain. Why?
(I don't know how to answer this, I said that it depends on what code changes are in the release, and then I know)
The other two are to give a picture to analyze the reason of spike, and then how to debug. I don’t know if the answer is good.

#
1. There are 200 instances on a 200-Ethernet machine, and there is a random instance that hangs every few minutes. Ask what may be the reason
2. Give a picture of the qps of the http response code, 500 of which have several spikes, ask how to analyze the cause of the error
3. Give a picture with the latency of different percentiles, among which p99 and p90 latency are very large, ask how to analyze the cause of the error
4. Ask what issues should be paid attention to if you want to release once a day

#
Question 1: The first database table is user and the second is friends. This friends table is a single case. For example, user01 and user02 are friends
 Then there will be a table id; user01; user02. If use01 has other friends, there will be other tables. Let me say how to display the total number of friends on the front end. . .
Question 2 There is a load balancing system implementation method which is basically a hashmap, 100 machines, let me say that when the number of users increases, there will be a magical problem, how to solve it.

#
OOP
1) Composition vs Inheritence
2) Depedency Injection
3) If you add a new class to the Collection Framwork, what should the documentation pay attention to

#
what is the most important object oriented programming principle for complex system

#
Chat about a project
Design pattern (singleton or something)

#
Ordinary programming,
1. Ask you what oop attributes are helpful to the modularization of the program.
2. He listed some questions for me to choose the most suitable data structure, such as what is the best way to save and query files, etc. I can't remember the others, and listed five.
3. It is also a data structure problem, and I forgot specifically.

System efficiency
1. Give you a picture, cpu and memory, to let you judge what went wrong.
2. The system is always hanging up for a certain period of time. What is the reason?
3. Forgot specifically

#
Some basic knowledge hashcode vs equal, override vs overwrite, dependency inject && conversion of control,
how to make code scalable，test tactics you often use in your daily work

#
1. what is dependency injection, pros and cons to use it
2. compare composition and inheritance
3. what is mock, why use it, cons
Mock is a method/object that simulates the behavior of a real method/object in controlled ways.
Mock objects are used in unit testing. Often a method under a test calls other external services
or methods within it. These are called dependencies. Once mocked, the dependencies behave the way
we defined them.