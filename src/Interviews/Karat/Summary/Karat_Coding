#
An ArrayList has only two elements, and one of them only appears once. Just find this element {1, 1, 1, 2, 1, 1}, seconds

#
Design an autocomplete function for IDE. Give a String[] as follows. After requiring the input of uppercase letters and a few lowercase letters, autocomplete is realized. All uppercase letters must be matched. I feel like I use Trie, but I don't know how to save and check. Everyone is welcome to discuss.

String[]  className {
        "GraphView",
        "DataGraphView",
        "DataController",
        "GraphViewController",
        "DataScienceView"
}

autocomplete(String[] className, "Data");  --> {"DataGraphView", "DataController", "DataScienceView"};
autocomplete(String[] className, "GVi");   -->  {"GraphView",  "GraphViewController"};
autocomplete(String[] className, "GraphController");   -->  {""};

The first is to build the dictionary tree normally, but it needs to be processed when searching: always add a * between the two uppercase letters. When searching the dictionary tree, if you encounter *, it means you can continue to recurse all lowercase letters. The node is similar to the operation with * on LC;
The second is to build a dictionary tree for uppercase letters, and then hang a map<"string of lowercase letters", Set<TrieNode>> in each TrieNode. For example, for "GraphView", create two TrieNodes: G and V, and then hang a map on the G node: [r, G], [ra, G], [rap, G], [raph, G], so GraV can guide the V node.

Just like a normal trie, only the uppercase letters are created. Each node saves a word list, and then directly searches for the abbreviation of uppercase letters when searching, and then returns the word list of the last node

#
input:
[{time, user id, resource id},
{time, user id, resource id},
{time, user id, resource id}]

Question 1: Find the start & end time of each user session
output:
[{user: [start time, end time]},
{user: [start time, end time]}]

Question 2: Find the resource id that has been accessed the most times in five minutes

#
I only completed 2 questions. The first input is a string, and there is a number and a string in the string (such as "111, dddddd"). To output the substring and the corresponding number of occurrences.
The second question is to input two string arrays and output the common sub array with the largest length.



3. High bug free requirements

#1
The first question: is to give a list, an entry is a student id corresponding to a course, it is required to output the common courses between every two students. Just use hashtable again, it's relatively simple.
The second question: is to give a list, an entry is a pre-course and the current course, including all courses, require output of intermediate courses. Use the doublu linked list to string together,
       Then after getting the head, use the slow fast pointer to find the middle point of the list, which is relatively simple. But I was more panicked and time ended. . .
#2
The first question: It is required to string as many words as possible with'-', but the length is required to be within a certain number. My main time was stuck on this question, and I finished it in the last 5 minutes. Hey, my hands are too rusty. . .
      It is easy to figure out what variables need to be maintained. .
The second question: It is based on the first question to split the given sentence, and then use a similar task schedule to insert'-' one by one until the maximum length is reached. .
(Can the host talk about the two redo questions in detail. The first question means to a string of words, and then as many words as possible are stringed together with'-' but the length cannot exceed a given value. ?
 The second question means that given a max_length, does it mean to string together all the words in the first question in order? Thank you! )

#3
Algorithm question:
1. Substring count, there have been many answers in this field. (!!!)
https://www.geeksforgeeks.org/number-of-substrings-of-one-string-present-in-other/

2. Given a graph (a 2D input array), the first question: write a function to return a collection with only one parent in the graph, and a collection without a parent.
   solution: 2 hashmaps Second question: Given two leaves, write a function to determine whether the two leaves have a common parent. solution: BFS

The things to note here are:
1. For the second question, the second question has little to do with the first question. Don’t habitually fall into the solution of the first question. I just saw the second question and felt that it would be a waste to modify it based on the first question. It took a lot of time.
2. The second question cannot use DFS, which is very difficult to understand

#4
The first question is a long string and a short string. How many substrings are in the long string is the same as the short one. The embedded function cannot be used.
Just use the most stupid way to compare each position from the long string to the short string. There seems to be no better way.
The second question, mathematical theory, does not require programming. Given a bunch of points, each point has an xy coordinate, which can be red or blue. Given a new point, how to judge its coordinates.
Talked about KNN, SVM, logistic regression.
In the third question, there is a positive integer column, given a threshold t, find out what the maximum sum of the continuous sub-sequence can be if it does not exceed t. The method is not difficult, two pointers,
Then move it to the right, it should work. However, due to various special circumstances (for example, all numbers are greater than t) when writing, there are many bugs, and I haven't changed it in the end. Brother kept asking questions,
I can't concentrate on finding bugs. The younger brother asked if the method could be optimized, but he didn't realize it at the time. Later, he reminded that it should be said that there is already a value in the process and it can be returned directly.
With three minutes left, let me stop and ask any questions about the company. My mind was all about bugs, and I just asked a question.
Feeling to kneel.

#5
http://interviewsource.blogspot.com/
After September 19, the topics are all indeed onsite topics

#6
The topics are all chicken essence (average + crawler tab + k data streams)

#7
The first question word wrap: Given a word list and the maximum length, these words are required to be concatenated with -, but the maximum length cannot be exceeded.
The second question word processor: I was a little dizzy at the time, I didn't understand the meaning of the question for a long time. . . The interviewer said that the function of the first question can be used.
We are building a word processor and we would like to implement a "reflow" functionality that
also applies full justification to the text.

Given an array containing lines of text and a new maximum width, re-flow the text to fit the new
width. Each line should have the exact specified width. If any line is too short, insert '-'
(as stand-ins for spaces) between words as equally as possible until it fits.

Note: we are using '-' instead of spaces between words to make testing and visual verification
of the results easier.


lines = [ "The day began as still as the",
          "night abruptly lighted with",
          "brilliant flame" ]

reflowAndJustify(lines, 24) ... "reflow lines and justify to length 24" =>

        [ "The--day--began-as-still",
          "as--the--night--abruptly",
          "lighted--with--brilliant",
          "flame" ] // <--- a single word on a line is not padded with spac


#8
1. Give you the action list of two users on a certain website, for example
["start","/account","/notification","/a","/b"],
["start","/a","/b"],
Find the longest common continuous action list of two users. As in the previous example, it should return ["/a","/b"]

2. Give you a user_made_purchase_id: [123,345], an ad_clicks: [[IP_Address, Time, Ad_Text]],
一个user_id_ip:[IP_Address,User_id]

#
Give a word list such as ["I", "am", "so" "sad"], and the longest number of characters such as 4, wrap these words with underscores and output:
 ["I_am", "so", "sad"] Keep the length of each output string less than or equal to the maximum number of characters. You can try this question before looking at my answer
 , My feeling is that it’s easy to kneel when the last word cannot be output


#
It is not difficult for Karat to prepare well, and he can find the face of seniors. All three questions are presented together in one set. I have summarized the common ones, and you can find them by searching.

Domain set Individual conditions for each question subdomain lcs ads conversion rate (**)
Meeting package Give meeting intervals Is the new meeting feasible? All free time Give room capacity Meeting details, how to arrange the meeting (**)
Calculator sets the result of string calculation +-digit +-() digit +-() variables
Student set (**) Classes for students. Students share courses. Give the order of classes, find an intermediate course. Find all intermediate courses
Treasure set Give a two-dimensional matrix, return to a certain point of neighbors, return to a certain point, the reachable area, give the start and end points, the shortest path to get all the treasures
Rectangle set to a two-dimensional matrix find a rectangle find all rectangles find all connected components


#
The topic has not been seen in the face script, it is a text line wrapper with a given line spacing. The first question is to ensure the integrity of the word and wrap, and the second question is more troublesome. You need to add "-" between words first.
If there is still a place, add "-", the last line is evenly distributed, and add any number of "-" between words.
# We are building a word processor and we would like to implement a "word-wrap" functionality.

# Given a maximum number of characters in a line followed by a list of words, return a collection of strings where each string element represents a line that contains as many words as possible, with the words in each line being concatenated with a single '-' (representing a space, but easier to see for testing). The length of each string must not exceed the maximum character length per line.
# Your function should take in the maximum characters per line and return a data structure representing all lines in the indicated max length.
# Note: built-in functions like Python textwrap module should not be used as solutions to this problem.

# Examples:

# words1 = [ "The", "day", "began", "as", "still", "as", "the", "night", "abruptly", "lighted", "with", "brilliant", "flame" ]
# wrapLines(words1, 13) ... "wrap words1 to line length 13" =>
#   [ "The-day-began", "as-still-as", "the-night", "abruptly", "lighted-with", "brilliant", "flame" ]

# wrapLines(words1, 20) ... "wrap words1 to line length 20" =>
#   [ "The-day-began-as", "still-as-the-night", "abruptly-lighted", "with-brilliant-flame" ]

# words2 = [ "Hello" ]
# wrapLines(words2, 5) ... "wrap words2 to line length 5" =>
#   [ "Hello" ]

# words3 = [ "Hello", "world" ]
# wrapLines(words3, 5) ... "wrap words3 to line length 5" =>
#   [ "Hello",  "world" ]

# n = number of words / total characters


#HashMap Type question
Parent_Children_Relationship
Badge_And_Employee
Domain_And_History
Friend_Circle
Domain_And_History(#3)
Student_And_Class
Design_Sparse_Vector

#Interval
Meeting_Room
Badge_And_Employee(#3)

#Grid DFS BFS
Treasures
Rectangles_In_Matrix

#DP
Domain_And_History(#2)

#Stack
Basic_Calculator

#Graph
Student_And_Class

#
Text_Wrap






